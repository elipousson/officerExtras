% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_to_body.R
\name{add_to_body}
\alias{add_to_body}
\alias{add_text_to_body}
\alias{add_xml_to_body}
\alias{add_gt_to_body}
\alias{add_gg_to_body}
\alias{add_value_with_keys}
\alias{add_str_with_keys}
\title{Add an xml string, text paragraph, or gt object at a specified position in a
rdocx object}
\usage{
add_to_body(
  docx,
  keyword = NULL,
  id = NULL,
  index = NULL,
  value = NULL,
  str = NULL,
  pos = "after",
  call = parent.frame(),
  ...
)

add_text_to_body(
  docx,
  value,
  style = NULL,
  pos = "after",
  .na = "NA",
  .null = NULL,
  .envir = parent.frame(),
  ...
)

add_xml_to_body(docx, str, pos = "after", ...)

add_gt_to_body(
  docx,
  gt_object,
  align = "center",
  caption_location = c("top", "bottom", "embed"),
  caption_align = "left",
  split = FALSE,
  keep_with_next = TRUE,
  pos = "after",
  tablecontainer = TRUE,
  ...
)

add_gg_to_body(
  docx,
  value,
  caption = "title",
  caption_style = style,
  autonum = NULL,
  style = "Normal",
  pos = "after",
  ...
)

add_value_with_keys(docx, value, ..., .f = add_text_to_body)

add_str_with_keys(docx, str, ..., .f = add_xml_to_body)
}
\arguments{
\item{docx}{A rdocx object.}

\item{keyword, id}{A keyword string used to place cursor with
\code{\link[officer:cursor]{officer::cursor_reach()}} or bookmark id with \code{\link[officer:cursor]{officer::cursor_bookmark()}}.
Defaults to \code{NULL}. If keyword or id are not provided, the gt object is
inserted at the front of the document.}

\item{index}{A integer matching a doc_index value appearing in a summary of
the docx object created with \code{\link[officer:docx_summary]{officer::docx_summary()}}. If index is for a
paragraph value, the text of the pargraph is used as a keyword.}

\item{value}{object to add in the document. Supported objects
are vectors, data.frame, graphics, block of formatted paragraphs,
unordered list of formatted paragraphs,
pretty tables with package flextable, 'Microsoft' charts with package mschart.}

\item{str}{a wml string}

\item{pos}{where to add the new element relative to the cursor,
one of "after", "before", "on".}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}

\item{...}{Additional parameters passed to \code{\link[officer:body_add_par]{officer::body_add_par()}},
\code{\link[officer:body_add_gg]{officer::body_add_gg()}}, or \code{\link[officer:body_add]{officer::body_add()}}.}

\item{style}{paragraph style name. These names are available with function \link[officer]{styles_info}
and are the names of the Word styles defined in the base document (see
argument \code{path} from \link[officer]{read_docx}).}

\item{.na}{[\code{character(1)}: \sQuote{NA}]\cr Value to replace \code{NA} values
with. If \code{NULL} missing values are propagated, that is an \code{NA} result will
cause \code{NA} output. Otherwise the value is replaced by the value of \code{.na}.}

\item{.null}{[\code{character(1)}: \sQuote{character()}]\cr Value to replace
NULL values with. If \code{character()} whole output is \code{character()}. If
\code{NULL} all NULL values are dropped (as in \code{paste0()}). Otherwise the
value is replaced by the value of \code{.null}.}

\item{.envir}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored. If \code{NULL} is passed, it is equivalent to \code{\link[=emptyenv]{emptyenv()}}.}

\item{gt_object}{A gt object converted to an OOXML string with
\code{\link[gt:as_word]{gt::as_word()}} then passed to \code{\link[=add_xml_to_body]{add_xml_to_body()}} as str parameter.
Required for \code{\link[=add_gt_to_body]{add_gt_to_body()}}.}

\item{align}{An option for table alignment. Can either be \code{"center"} (the
default), \code{"left"}, or \code{"right"}.}

\item{caption_location}{Determines where the caption should be positioned.
This can either be \code{"top"} (the default), \code{"bottom"}, or \code{"embed"}.}

\item{caption_align}{Determines the alignment of the caption. This is
either \code{"left"} (the default), \code{"center"}, or \code{"right"}. This option is
only used when \code{caption_location} is not set as \code{"embed"}.}

\item{split}{A \code{TRUE} or \code{FALSE} (the default) value that indicates whether
to activate the Word option \verb{Allow row to break across pages}.}

\item{keep_with_next}{A \code{TRUE} (the default) or \code{FALSE} value that indicates
whether a table should use Word option \verb{keep rows together}.}

\item{tablecontainer}{If \code{TRUE} (default), add tables inside of a
tablecontainer tag that automatically adds a table number and converts the
gt title into a table caption. This feature is based on code from the \href{https://github.com/GSK-Biostatistics/gto/}{gto package} by Ellis Hughes to
transform the gt_object to OOXML and insert the XML into the docx object.}

\item{caption}{Name of the ggplot2 label to use as a caption if plot passed
to value has a label for this value. Defaults to "title".}

\item{caption_style}{Passed to style for \code{\link[officer:body_add_caption]{officer::body_add_caption()}}.
Defaults to same value as style.}

\item{autonum}{an object generated with function \link[officer]{run_autonum}}

\item{.f}{Any function that takes a docx and value parameter and returns a
rdocx object. A keyword parameter must also be supported if named is TRUE.
Defaults to \code{\link[=add_text_to_body]{add_text_to_body()}}.}
}
\value{
A rdocx object with xml, gt tables, or paragraphs of text added.
}
\description{
Wrappers for \code{\link[officer:body_add_par]{officer::body_add_par()}}, \code{\link[officer:body_add_gg]{officer::body_add_gg()}}, and
\code{\link[officer:body_add_xml]{officer::body_add_xml()}} that use the \code{\link[=cursor_docx]{cursor_docx()}} helper function to
allow users to pass the value and keyword, id, or index value used to place a
"cursor" within the document using a single function. If \code{pos = NULL},
\code{\link[=add_to_body]{add_to_body()}} calls \code{\link[officer:body_add]{officer::body_add()}} instead of
\code{\link[officer:body_add_par]{officer::body_add_par()}}.
\itemize{
\item \code{\link[=add_text_to_body]{add_text_to_body()}} passes value to \code{\link[glue:glue]{glue::glue()}}
to add support for glue string interpolation.
\item \code{\link[=add_gt_to_body]{add_gt_to_body()}} converts gt tables to OOXML with \code{\link[gt:as_word]{gt::as_word()}}.
\item \code{\link[=add_gg_to_body]{add_gg_to_body()}} adds a caption following the plots using the labels
from the plot object.
}
}
\details{
Using \code{\link[=add_value_with_keys]{add_value_with_keys()}} or \code{\link[=add_str_with_keys]{add_str_with_keys()}}

\code{\link[=add_value_with_keys]{add_value_with_keys()}} supports value vectors of length 1 or longer. If
value is named, the names are assumed to be keywords indicating the cursor
position for adding each value in the vector. If value is not named, a
keyword parameter with the same length as value must be provided. When \code{named = FALSE}, no keyword parameter is required. Add \code{\link[=add_str_with_keys]{add_str_with_keys()}} works
identically but uses a str parameter and .f defaults to \code{\link[=add_xml_to_body]{add_xml_to_body()}}.
}
\examples{
if (rlang::is_installed("gt")) {
  docx <- read_docx_ext(
    filename = "example.docx",
    path = system.file("doc_examples", package = "officer")
  )

  tab_1 <-
    gt::gt(
      gt::exibble,
      rowname_col = "row",
      groupname_col = "group"
    )

  add_gt_to_body(
    docx,
    tab_1,
    keyword = "Title 1"
  )

  tab_str <- gt::as_word(tab_1)

  add_str_with_keys(
    docx,
    str = c("Title 1" = tab_str, "Title 2" = tab_str)
  )
}
}
\author{
Ellis Hughes \email{ellis.h.hughes@gsk.com}
(\href{https://orcid.org/0000-0003-0637-4436}{ORCID})
}
